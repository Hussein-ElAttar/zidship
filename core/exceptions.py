from rest_framework.exceptions import APIException
from rest_framework.views import exception_handler


class CoreException(APIException):
    pass

def core_exception_handler(exc, context):
    # If an exception is thrown that we don't explicitly handle here, we want
    # to delegate to the default exception handler offered by DRF. If we do
    # handle this exception type, we will still want access to the response
    # generated by DRF, so we get that response up front.
    response = exception_handler(exc, context)
    handlers = {
        'ValidationError': _handle_validation_error,
        'CoreException': _handle_zidship_error
    }
    # This is how we identify the type of the current exception. We will use
    # this in a moment to see whether we should handle this exception or let
    # Django REST Framework do it's thing.
    exception_class = exc.__class__.__name__

    if isinstance(exc, CoreException):
        return handlers['CoreException'](exc, context, response)

    if exception_class in handlers:
        # If this exception is one that we can handle, handle it. Otherwise,
        # return the response generated earlier by the default exception 
        # handler.
        return handlers[exception_class](exc, context, response)


    return _handle_generic_error(exc, context, response)

def _handle_validation_error(exc, context, response):
    errors = []
    for field, value in response.data.items():
        errors.append({'field': field, 'message': value})
        response.data = {'data': [], 'message': 'Validation Error', 'errors': errors, 'status': False}

    return response

def _handle_zidship_error(exc, context, response):
    try:
        message = response.data.get('detail')
        response.data = {'data': [], 'message': message, 'errors': [message], 'status': True}
    except:
        pass
    return response

def _handle_generic_error(exc, context, response):
    return _handle_zidship_error(exc, context, response)

